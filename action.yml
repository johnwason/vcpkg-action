name: vcpkg-action
description: Simple action to run vcpkg and cache results
inputs:
  pkgs:
    description: "List of packages to build, separated by spaces. Cannot be used with manifest-dir"
    required: false
  triplet:
    description: "vcpkg triplet to use"
    required: true
  extra-args:
    description: "Extra vcpkg command line args (optional)"
    required: false
  cache-key:
    description: "Additional cache key component (optional)"
    required: false
  disable-cache:
    description: "Disable cache (useful for release builds)"
    required: false
    default: 'false'
  revision:
    description: "vcpkg revision to checkout."
    required: false
    default: ''
  token:
    description: "GitHub token to authenticate API requests. Recommended to use  github.token "
    required: false
    default: ''
  manifest-dir:
    description: Directory containing vcpkg.json manifest file. Cannot be used with pkgs.
    required: false
    default: ''
runs:
  using: "composite"
  steps:
  - name: Get latest Github release
    uses: cardinalby/git-get-release-action@v1
    id: get-latest-vcpkg-release
    env:
      GITHUB_TOKEN: ${{ inputs.token }}
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
    with:
      latest: true
      repo: microsoft/vcpkg
      prerelease: false
      draft: false    
  - name: Determine checkout tag
    shell: bash
    id: determine-checkout-revision
    run: |
      if [[ "${{ inputs.revision }}" != "" ]]; then
        echo "vcpkg-revision=${{ inputs.revision }}" >> $GITHUB_OUTPUT
      else
        echo "vcpkg-revision=${{ steps.get-latest-vcpkg-release.outputs.tag_name }}" >> $GITHUB_OUTPUT
      fi
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: checkout-vcpkg
    uses: actions/checkout@v3
    with:
      path: ${{ github.workspace }}/vcpkg
      repository: microsoft/vcpkg
      ref: '${{ steps.determine-checkout-revision.outputs.vcpkg-revision }}'
      fetch-depth: 1 
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: bootstrap-vcpkg-win
    if: runner.os == 'Windows'
    working-directory: ${{ github.workspace }}\vcpkg
    run: bootstrap-vcpkg.bat
    shell: cmd
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: bootstrap-vcpkg-unix
    if: runner.os != 'Windows'
    working-directory: ${{ github.workspace }}/vcpkg
    run: ./bootstrap-vcpkg.sh
    shell: bash
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: vcpkg-dry-run-win
    if: runner.os == 'Windows' && inputs.manifest-dir == ''
    working-directory: ${{ github.workspace }}\vcpkg
    shell: cmd
    run: |
      set VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}\vcpkg_cache
      mkdir %VCPKG_DEFAULT_BINARY_CACHE%
      "${{ github.workspace }}/vcpkg/vcpkg.exe" install --dry-run --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }} > vcpkg_dry_run.txt
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: vcpkg-dry-run-unix
    if: runner.os != 'Windows' && inputs.manifest-dir == ''
    working-directory: ${{ github.workspace }}/vcpkg
    shell: bash
    run: |
      export VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/vcpkg_cache
      mkdir $VCPKG_DEFAULT_BINARY_CACHE
      "${{ github.workspace }}/vcpkg/vcpkg" install --dry-run --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }} > vcpkg_dry_run.txt
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: vcpkg-dry-run-win-manifest
    if: runner.os == 'Windows' && inputs.manifest-dir != ''
    working-directory: ${{ github.workspace }}\vcpkg
    shell: cmd
    run: |
      set VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}\vcpkg_cache
      mkdir %VCPKG_DEFAULT_BINARY_CACHE%
      "${{ github.workspace }}/vcpkg/vcpkg.exe" install --dry-run --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} --x-manifest-root=${{ inputs.manifest-dir }} --x-install-root=${{ github.workspace }}\vcpkg\installed > vcpkg_dry_run.txt
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: vcpkg-dry-run-unix-manifest
    if: runner.os != 'Windows' && inputs.manifest-dir != ''
    working-directory: ${{ github.workspace }}/vcpkg
    shell: bash
    run: |
      export VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/vcpkg_cache
      mkdir $VCPKG_DEFAULT_BINARY_CACHE
      "${{ github.workspace }}/vcpkg/vcpkg" install --dry-run --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} --x-manifest-root=${{ inputs.manifest-dir }} --x-install-root=${{ github.workspace }}/vcpkg/installed > vcpkg_dry_run.txt
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: cache-vcpkg-archives
    if: ${{ inputs.disable_cache != 'true' }}
    id: cache-vcpkg-archives
    uses: pat-s/always-upload-cache@v3
    with:
      path: ${{ github.workspace }}/vcpkg_cache
      key: ${{ runner.os }}-${{ inputs.triplet }}-vcpkg-${{ hashFiles('vcpkg/vcpkg_dry_run.txt') }}-${{ inputs.cache-key }}
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: build-vcpkg-win
    if: runner.os == 'Windows' && inputs.manifest-dir == ''
    shell: cmd
    working-directory: ${{ github.workspace }}\vcpkg
    run: |
      set VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}\vcpkg_cache
      "${{ github.workspace }}/vcpkg/vcpkg.exe" install --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }}
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: build-vcpkg-unix
    if: runner.os != 'Windows' && inputs.manifest-dir == ''
    shell: bash
    working-directory: ${{ github.workspace }}/vcpkg
    run: |
      export VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/vcpkg_cache
      "${{ github.workspace }}/vcpkg/vcpkg" install --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} ${{ inputs.pkgs }}
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: build-vcpkg-win
    if: runner.os == 'Windows' && inputs.manifest-dir != ''
    shell: cmd
    working-directory: ${{ github.workspace }}\vcpkg
    run: |
      set VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}\vcpkg_cache
      "${{ github.workspace }}/vcpkg/vcpkg.exe" install --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} --x-manifest-root=${{ inputs.manifest-dir }} --x-install-root=${{ github.workspace }}/vcpkg/installed
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  - name: build-vcpkg-unix
    if: runner.os != 'Windows' && inputs.manifest-dir != ''
    shell: bash
    working-directory: ${{ github.workspace }}/vcpkg
    run: |
      export VCPKG_DEFAULT_BINARY_CACHE=${{ github.workspace }}/vcpkg_cache
      "${{ github.workspace }}/vcpkg/vcpkg" install --triplet ${{ inputs.triplet }} ${{ inputs.extra-args }} --x-manifest-root=${{ inputs.manifest-dir }} --x-install-root=${{ github.workspace }}/vcpkg/installed
    env:
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"